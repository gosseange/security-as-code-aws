Design a runbook

To design a runbook workflow using the visual design experience, you drag an automation action from the Actions browser into the canvas, placing it where you want it in your runbook's workflow. You can also re-order actions in your workflow by dragging them to a different location. As you drag an action onto the canvas, a line appears wherever you can drop the action in your workflow. After an action is dropped onto the canvas, its code is auto-generated and added inside your runbook's content.

If you know the name of the action you want to add, use the search box at the top of the Actions browser to find the action.

After you drop an action onto the canvas, configure it using the Form panel on the right. This panel contains the General, Inputs, Outputs, and Configuration tabs for each automation action or API action that you place on the canvas. For example, the General tab consists of the following sections:

The Step name identifies the step. Specify a unique value for the step name.

The Description helps you describe what the action is doing in your runbook's workflow.

The Inputs tab contains fields that vary based on the action. For example, the aws:executeScript automation action consists of the following sections:

The Runtime is the language to use for running the provided script.

The Handler is the name of your function. You must ensure that the function defined in the handler has two parameters: events and context. The PowerShell runtime doesn't support this parameter.

The Script is an embedded script that you want to run during the workflow.

(Optional) The Attachment is for standalone scripts or .zip files that can be invoked by the action. This parameter is required for JSON runbooks.

The Outputs tab helps you specify the values that you want to output from an action. You can reference output values in later actions of your workflow, or generate output from actions for logging purposes. Not all actions will have an Outputs tab because not all actions support outputs. For example, the aws:pause action doesn't support outputs. For actions that do support outputs, the Outputs tab consists of the following sections:

The Name is the name to be used for the output value. You can reference outputs in later actions of your workflow.

The Selector is a JSONPath expression string beginning with "$." that is used to select one or more components within a JSON element.

The Type is the data type for the output value. For example, a String or Integer data type.

The Configuration tab contains properties and options that all automation actions can use. The action consists of the following sections:

The Max attempts property is the number of times an action retries if it fails.

The Timeout seconds property specifies the timeout value for an action.

The Is critical property determines if the action failure stops the entire automation.

The Next step property determines which action the automation goes to next in the runbook.

The On failure property determines which action the automation goes to next in the runbook if the action fails.

The On cancel property determines which action the automation goes to next in the runbook if the action is canceled by a user.

To delete an action, you can use backspace, the toolbar above the canvas, or right-click and choose Delete action.

As your workflow grows, it might not fit in the canvas. To help make the workflow fit in the canvas, try one of the following options:

Use the controls on the side panels to resize or close the panels.

Use the toolbar at the top of the canvas to zoom the workflow graph in or out.
